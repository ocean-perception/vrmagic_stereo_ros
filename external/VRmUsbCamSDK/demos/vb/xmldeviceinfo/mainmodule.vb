' ==============================================================================================
' This file is part of the VRmagic VRmUsbCam .NET API v2 XmlDeviceInfo Application for VB 2005
' ==============================================================================================
' Main Function
' ----------------------------------------------------------------------------------------------
Imports System.Xml
Imports System.IO
Imports System.Text
Imports System.Console
Imports VRmUsbCamNET

Class MainModule

    Shared Sub Main()
        WriteLine("=====================================================")
        WriteLine("===  VRmagic VRmUsbCam .NET API v2 XmlDeviceInfo  ===")
        WriteLine("=====================================================")
        WriteLine("(v.{0})", VRmUsbCam.Version)
        WriteLine()

        ' uncomment one of the following lines to enable logging features of VRmUsbCam (for customer support)
        ' VRmUsbCam.EnableLogging()  ' save logfile to default location 
        ' VRmUsbCam.EnableLoggingEx("mylogfile.log")  ' save logfile to user defined location

        ' switch to "english" culture to have "." as decimal point
        Threading.Thread.CurrentThread.CurrentCulture = New Globalization.CultureInfo("en-US")

        ' check for connected devices
        Dim devlist() As VRmUsbCamNET.DeviceKey = VRmUsbCam.DeviceKeyList

        ' open first usable device
        Dim dev As VRmUsbCamNET.Device = Nothing
        For Each key As DeviceKey In devlist
            If Not key.Busy Then
                dev = VRmUsbCam.OpenDevice(key)
                Exit For
            End If
        Next key

        ' display error when no camera has been found
        If dev Is Nothing Then
            Console.WriteLine("No suitable VRmagic device found!")
            Exit Sub
        End If

        ' reset device to factory settings
        dev.LoadConfig(0)

        ' determine hardware, firmware and API version
        Dim fwRev As Integer = 0
        If dev.PropertySupported(PropId.DEVICE_FIRMWARE_REVISION_I) Then
            fwRev = DirectCast(dev.PropertyValue(PropId.DEVICE_FIRMWARE_REVISION_I), Integer)
        End If
        Dim hwRev As Integer = 0
        If dev.PropertySupported(PropId.DEVICE_HARDWARE_REVISION_I) Then
            hwRev = DirectCast(dev.PropertyValue(PropId.DEVICE_HARDWARE_REVISION_I), Integer)
        End If
        Dim apiRev As Integer = VRmUsbCam.Version
        Dim fwRevString As String = Math.Floor(fwRev / 100).ToString + "." + (fwRev Mod 100).ToString("D2")
        Dim hwRevString As String = Math.Floor(hwRev / 100).ToString + "." + (hwRev Mod 100).ToString
        Dim apiRevString As String = apiRev.ToString.Chars(0).ToString + "." + apiRev.ToString.Chars(1).ToString _
                             + "." + apiRev.ToString.Chars(2).ToString + "." + apiRev.ToString.Chars(3).ToString

        ' copy xsl to temporary directory
        File.Copy(Path.Combine("xml", "VRmDeviceInformationHtml.xsl"), Path.Combine(Path.GetTempPath(), "VRmDeviceInformationHtml.xsl"), True)

        ' open XML output file
        Dim xmlFilename As String = System.IO.Path.Combine(Path.GetTempPath(), dev.DeviceKey.Product.Replace("/", "_") + "_Rev" + hwRevString + "_Fw" + fwRevString + ".xml")
        WriteLine("Generating XML file {0}...", xmlFilename)
        Dim doc As New XmlTextWriter(xmlFilename, Nothing)
        doc.Formatting = Formatting.Indented

        doc.WriteStartDocument()
        doc.WriteComment("This file is auto-generated by VRmUsbCam XmlDeviceInfo. (R) VRmagic GmbH 2006-2008")
        doc.WriteProcessingInstruction("xml-stylesheet", "type='text/xsl' href='VRmDeviceInformationHtml.xsl'")

        ' write out general informations about device & API
        doc.WriteStartElement("Device")
        doc.WriteAttributeString("product", dev.DeviceKey.Product)
        doc.WriteAttributeString("hardware", hwRevString)
        doc.WriteAttributeString("firmware", fwRevString)
        doc.WriteAttributeString("api", apiRevString)

        ' dump source formats
        doc.WriteStartElement("SourceFormats")
        For Each port As Int32 In dev.SensorPortList
            doc.WriteStartElement("SensorPort")
            doc.WriteAttributeString("number", port.ToString)
            If dev.PropertySupported(PropId.GRAB_SENSOR_PROPS_SELECT_E) Then
                dev.PropertyValue(PropId.GRAB_SENSOR_PROPS_SELECT_E) = DirectCast(PropId.GRAB_SENSOR_PROPS_SELECT_1 + (port - 1), PropId)
            End If
            Dim maxFrameRate As Single = 0
            If dev.PropertySupported(PropId.CAM_FRAMERATE_MAX_F) Then
                maxFrameRate = DirectCast(dev.PropertyValue(PropId.CAM_FRAMERATE_MAX_F), Single)
            End If
            writeFormat(dev.SourceFormat(port), doc, 0, True, maxFrameRate)
            doc.WriteEndElement() 'end of "SensorPort"
        Next
        If dev.PropertySupported(PropId.GRAB_SENSOR_PROPS_SELECT_E) Then
            dev.PropertyValue(PropId.GRAB_SENSOR_PROPS_SELECT_E) = PropId.GRAB_SENSOR_PROPS_SELECT_1
        End If
        doc.WriteEndElement() 'end of "SourceFormats"

        ' dump device properties
        doc.WriteStartElement("PropertyList")
        For Each id As PropId In dev.PropertyList
            writeProperty(dev, doc, id)
        Next
        doc.WriteEndElement() 'end of "PropertyList"

        doc.WriteEndElement() 'end of "Device"
        doc.Close()
        WriteLine("Finished!")

        ' try to open the generated file 
        Dim viewer As New System.Diagnostics.Process
        viewer.StartInfo.FileName = xmlFilename
        viewer.Start()
    End Sub


    ' writes a ImageFormat out to XML
    Shared Sub writeFormat(ByRef format As ImageFormat, ByRef doc As XmlTextWriter, ByVal index As Integer, ByVal isSourceFormat As Boolean, ByVal maxFrameRate As Single)
        doc.WriteStartElement("Format")
        doc.WriteAttributeString("name", format.ToString)
        If Not isSourceFormat Then
            doc.WriteAttributeString("index", index.ToString)
        End If
        doc.WriteElementString("Description", format.Description)
        writeVal("Size", doc, format.Size)
        doc.WriteElementString("ColorFormat", format.ColorFormat.ToString)
        doc.WriteElementString("PixelDepth", format.PixelDepth.ToString)
        If maxFrameRate <> 0 Then
            doc.WriteElementString("MaxFrameRate", maxFrameRate.ToString)
        End If
        doc.WriteStartElement("Flags")
        For Each flag As Object In [Enum].GetValues(GetType(VRmUsbCamNET.ImageModifier))
            If (format.ImageModifier And DirectCast(flag, ImageModifier)) <> 0 Then doc.WriteElementString(flag.ToString, "")
        Next
        doc.WriteEndElement() ' "Flags"
        If isSourceFormat Then
            doc.WriteStartElement("TargetFormatList")
            For ti As Integer = 0 To format.TargetFormatList.Length - 1
                writeFormat(format.TargetFormatList(ti), doc, ti, False, maxFrameRate)
            Next
            doc.WriteEndElement() 'end of "TargetFormatList"
        End If
        doc.WriteEndElement() 'end of "Format"
    End Sub


    ' writes a property out to XML
    Shared Sub writeProperty(ByRef dev As Device, ByRef doc As XmlTextWriter, ByVal id As PropId)
        Dim pi As PropInfo = dev.PropertyInfo(id)
        Dim isEnumConst As Boolean = (id >= &H10000)

        ' filter away hardware/firmware revision, because it's already in the XML document header
        If id = PropId.DEVICE_FIRMWARE_REVISION_I Or id = PropId.DEVICE_HARDWARE_REVISION_I Then Exit Sub

        If Not isEnumConst Then
            doc.WriteStartElement("Property")
        Else
            doc.WriteStartElement("Constant")
        End If
        doc.WriteAttributeString("name", pi.IdString)
        doc.WriteAttributeString("type", pi.Type.Name.Replace("PropId", "Enum"))
        doc.WriteAttributeString("writeable", pi.Writeable.ToString())
        doc.WriteAttributeString("id", "H" + id.ToString("X"))

        doc.WriteElementString("Description", pi.Description)

        If Not isEnumConst Then
            Dim pa As PropAttribs = dev.PropertyAttribs(id)

            ' write out current value (this is the factory default value, because in the beginning, we 
            ' loaded factory defaults)
            writeVal("Default", doc, dev.PropertyValue(id))
            If pi.Type.Name.Equals("PropId") Then
                ' for enum properties, list out all possible constants
                doc.WriteStartElement("Constants")
                For enumconst As PropId = DirectCast(pa.Min, PropId) To DirectCast(pa.Max, PropId)
                    If dev.PropertySupported(enumconst) Then writeProperty(dev, doc, enumconst)
                Next enumconst
                doc.WriteEndElement()
            ElseIf pi.Writeable Then
                ' otherwise, list value range
                doc.WriteStartElement("Range")
                writeVal("Min", doc, pa.Min)
                writeVal("Max", doc, pa.Max)
                writeVal("Step", doc, pa.Step)
                doc.WriteEndElement()
            End If
        Else
            ' for enum property constants, just print out the value
            writeVal("Value", doc, dev.PropertyValue(id))
        End If
        doc.WriteEndElement()
    End Sub

    ' writes a property value out to the XML. reformats Size,Point and Rectangle data type
    Shared Sub writeVal(ByVal elementname As String, ByRef doc As XmlTextWriter, ByVal val As Object)
        doc.WriteStartElement(elementname)
        If TypeOf val Is Drawing.Size Then
            doc.WriteStartElement("Compound")
            doc.WriteAttributeString("type", val.GetType.Name)
            doc.WriteElementString("Width", DirectCast(val, Drawing.Size).Width.ToString)
            doc.WriteElementString("Height", DirectCast(val, Drawing.Size).Height.ToString)
            doc.WriteEndElement()
        ElseIf TypeOf val Is Drawing.Point Then
            doc.WriteStartElement("Compound")
            doc.WriteAttributeString("type", val.GetType.Name)
            doc.WriteElementString("X", DirectCast(val, Drawing.Point).X.ToString)
            doc.WriteElementString("Y", DirectCast(val, Drawing.Point).Y.ToString)
            doc.WriteEndElement()
        ElseIf TypeOf val Is Drawing.Rectangle Then
            doc.WriteStartElement("Compound")
            doc.WriteAttributeString("type", val.GetType.Name)
            doc.WriteElementString("Left", DirectCast(val, Drawing.Rectangle).Left.ToString)
            doc.WriteElementString("Top", DirectCast(val, Drawing.Rectangle).Top.ToString)
            doc.WriteElementString("Width", DirectCast(val, Drawing.Rectangle).Width.ToString)
            doc.WriteElementString("Height", DirectCast(val, Drawing.Rectangle).Height.ToString)
            doc.WriteEndElement()
        Else
            doc.WriteString(val.ToString())
        End If
        doc.WriteEndElement()
    End Sub

End Class
