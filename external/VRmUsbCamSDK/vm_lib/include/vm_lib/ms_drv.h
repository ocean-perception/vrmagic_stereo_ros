/*----------------------------------------------------------------------*/
/**
* @name MS_DRV.H
* <br>  Mouse driver header
*
* <br>  VM_LIB is subject to the license and usage terms of VRmagic GmbH,
* <br>  which are distributed with this software.
* <br>
* <br>  This file contains macros, typedefs and prototypes for the mouse
*       driver functions:
*
* @version
*       Created: 09.11.2005
* <br>  Modified:
*/
/*----------------------------------------------------------------------*/
/*@{*/

#ifndef _MS_DRV_H_LOADED   /* [[[ */
#define _MS_DRV_H_LOADED

#include "cdef.h"
#include "io_ser.h"

//#if _CAM_TYPE == _CAM_TI    /* [[[ - TI camera */

/*----------------------------------------------------------------------*/
/*                           Macros and typedefs                        */
/*----------------------------------------------------------------------*/

/* Type of mouse event */
typedef enum {
        MS_EV_NONE  = 0,
        MS_EV_MOVE  = 0x01,
        MS_EV_UP    = 0x02,
        MS_EV_DOWN  = 0x04,
        MS_EV_EXIT  = 0x08
} MS_DRV_EVENT_TYPE;

/* Information about buttons (pressed, clicked, released) */
typedef enum {
        MS_BUT_NONE  = 0x00,
        MS_BUT_LEFT  = 0x01,
        MS_BUT_RIGHT = 0x02,
        MS_BUT_MIDLE = 0x04
} MS_DRV_BUTTONS;

/**
* @name MS_DRV_EVENT
* Event generated by mouse. <br>It contains one event generated by mouse.
* Mouse move or button state change is such event.
*/
typedef struct
{
    MS_DRV_EVENT_TYPE  type;      /* Type of event */
    MS_DRV_BUTTONS     but;       /* Mouse buttons */
//    int type;       /* Type of event */
//    int but;        /* Mouse buttons */
    int x;          /* absolute horizontal position */
    int y;          /* absolute vertical position */
    int dx;         /* relative horizontal move */
    int dy;         /* relative vertical move */
} MS_DRV_EVENT;

/* Global variable macros */
//#define BUF                (ms.buf)
//#define POS                (ms.pos)
//#define MIN_X              (ms.min_x)
//#define MAX_X              (ms.max_x)
//#define MIN_Y              (ms.min_y)
//#define MAX_Y              (ms.max_y)
//#define SCROLL             (ms.scroll)
//#define MOUSE_ERROR        (ms.mouse_error)
//#define HARDWARE           (ms.hardware)
//#define FLAG_SKIP          (ms.flag_skip)
//#define STATE              (ms.state)
//#define OLD_STATE          (ms.old_state)
//#define MOUSE_SPEED_LIMIT  (ms.mouse_speed_limit)
//
//#define eq_states(f,s)  ( (f)->but==(s)->but && (f)->x==(s)->x && (f)->dx==(s)->dx && (f)->y==(s)->y && (f)->dy==(s)->dy )

/*............. Mouse types */
#define MOUSE_TYPE_MM         0     /* mouse type = Microsoft           */
#define MOUSE_TYPE_MI         1     /* mouse type = Microsoft Intelli   */
#define MOUSE_TYPE_MS         2     /* mouse type = Mouse Systems       */
#define MOUSE_TYPE_KB         3     /* mouse type = Keyboard            */

#define MOUSE_VER_STEP        8     /* default vert. mouse step         */

#define DEVICE_TYPE_MOUSE     0     /* device type = Mouse              */
#define DEVICE_TYPE_OTHER     1     /* device type = Other hardware     */
#define DEVICE_TYPE_PC        2     /* device type = PC Emulator        */

#define Mouse_Event    ms.mouse_event       /* mouse event              */
#define Mouse_Type     ms.mouse_type        /* mouse model              */
#define Device_Type    ms.ms_device_type    /* device type              */


//#define MouseHorMvm   gl.gim.msgim_hor_mvm  /* accum. horiz. movement   */
//#define MouseVerMvm   gl.gim.msgim_ver_mvm  /* accum. vert. movement    */
//#define gim_Event     gl.gim.msgim_event    /* mouse GIM event          */
//#define MouseVerStep  gl.flash.mouse_ver_step  /* mouse vertical step   */


/*............. Other macros */
//#ifndef NULL
//  #define NULL (void *)0
//#endif
//
//#ifndef TRUE
//  #define TRUE 1
//#endif
//#ifndef FALSE
//  #define FALSE 0
//#endif
//#ifndef max
//  #define max(a,b)    (((a) > (b)) ? (a) : (b))
//#endif
//#ifndef min
//  #define min(a,b)    (((a) < (b)) ? (a) : (b))
//#endif
//#ifndef abs
//  #define abs(a)    (((a) < 0) ? (-a) : (a))
//#endif

/*----------------------------------------------------------------------*/
/*                         Mouse driver typedefs                        */
/*----------------------------------------------------------------------*/
/**
* @name MS_DRV_STATE
* Current state of mouse. Includes buttons and position
*/
typedef struct {
    /* Current pressed buttons */
        MS_DRV_BUTTONS but;
    /* Absolute positition */
        int x,y;
    /* Relative move */
        int dx,dy;
} MS_DRV_STATE;
//typedef struct _MS_DRV_STATE MS_DRV_STATE;

/* Hardware conected to serial port */
typedef enum {
        MS_NONE_HARDWARE=0,
        MS_OTHER_DEVICE,
        MS_PC_EMULATOR,
        MS_MICROSOFT_MOUSE,
        MS_MICROSOFT_INTELLI_MOUSE,
        MS_MOUSE_SYSTEMS,
        MS_TERMINAL_MOUSE,
        MS_KEYBOARD_MOUSE
} MS_CONECTED_HARDWARE;


#define MAX_MOUSE_EVENTS 0x10

typedef struct {
    /* Data for mouse driver */
    char buf[5];        /* buffer for data from mouse */
    int pos;            /* position of last byte in buffer*/
    int mouse_error;    /* is there is some error */
    int min_x, min_y, max_x, max_y; /* range for all cordinates */
    int scroll;         /* some mouses had scroll button - this is increment for it*/
    MS_CONECTED_HARDWARE hardware;
    int flag_skip;
    MS_DRV_STATE state, old_state;
    int mouse_speed_limit;


    /* needed for faster button changes (run mode right click)
       all mouse packed are transfered here and right button event
       is moved in front for immediate working
    */
    MS_DRV_EVENT pending_mouse_events[MAX_MOUSE_EVENTS]; /* mouse events pending */

/*............. Mouse parameters */
        short mouse_type;       /* mouse type:                          */
                                /*   0 : Microsoft Mouse                */
                                /*   1 : Microsoft Intelli Mouse        */
                                /*   2 : Mouse Systems                  */

//        short mouse_ver_step;   /* mouse vertical step = number of      */
                                /* pixels, passed by the mouse in vert. */
                                /* direction to select next/previous    */
                                /* item (menu line, dialog-box control, */
                                /* selected user-program element)       */

/*............. Serial device parameters */
        short ms_device_type;   /* device type for io: Mouse, Other     */


/*............. GIM parameters */
        MS_DRV_EVENT mouse_event;     /* current mouse event          */
        int         use_current_event;  /* do not get new event       */

} MS_STATE;
extern  MS_STATE ms;

/*----------------------------------------------------------------------*/
/*                            MS queue buffer                           */
/*----------------------------------------------------------------------*/
/*
* The mouse queue buffer works in 2 modes:
*   - write mode : the driver saves (echoes) all received mouse bytes
*     into a "write" queue, which can be used to pass the mouse data
*     to a parallel task
*   - read mode : the driver reads mouse data from a "read" queue
*     instead of reading the mouse TCP port. This mode is used to feed
*     the mouse driver with data, received by a parallel task.
*
* You must allocate and free write and/or read queues by the ms_queue_open
* and ms_queue_close functions. The ms_queue_open function returns 'msq'
* handle (pointer to MS_QUEUE structure), which must be passed to the
* driver by one of the functions:
*   ms_queue_wrenb(msq) - enable the write queue
*   ms_queue_rdenb(msq) - enable the read queue
*/

/* MS queue buffer size: must be a power of 2 */
#define MS_QUEUE_SIZE 0x800     /* default size 2048  */

typedef struct
{
    unsigned char *buf;     /* ptr to MS queue buffer           */
    int     size;           /* size of MS queue buffer in bytes */
    int     cnt;            /* current # of stored bytes        */
    int     wrptr;          /* write pointer (buf index)        */
    int     rdptr;          /* read pointer (buf index)         */

//    unsigned char buf[MS_QUEUE_SIZE];   /* MS queue buffer      */
//    int     enb;            /* queue enable flag: 0=off, 1=on         */
} MS_QUEUE;
//extern MS_QUEUE ms_Queue;   /* defined in ms_drv.c */


/*----------------------------------------------------------------------*/
/*                          Function prototypes                         */
/*----------------------------------------------------------------------*/
#ifdef __cplusplus
extern "C" {
#endif

/*............. Public functions */
int  ms_drv_init (                                      /* MS_DRV.C     */
    int port );     /* [in] TCP connection port for mouse communication */
void ms_drv_close ();
int ms_connected ();
int ms_get_state (      /* get mouse state, rc = button state   */
    int  *x,            /* output x-coordinate                  */
    int  *y );          /* output y-coordinate                  */
void ms_set_bound_rectangle(int xc1, int yc1, int xc2, int yc2);
void ms_set_mouse_position(int x, int y);

/*............... MS queue functions */
MS_QUEUE *ms_queue_open (                               /* MS_DRV.C     */
    int   size );           /* [in] MS queue buffer size in bytes       */
void ms_queue_close (
    MS_QUEUE *msq );        /* [in] MS queue handle                     */
void ms_queue_wrenb (
    MS_QUEUE *msq );        /* [in] MS queue handle                     */
void ms_queue_rdenb (
    MS_QUEUE *msq );        /* [in] MS queue handle                     */
void ms_queue_fill (
    int byte );             /* [in] byte to store into mouse queue      */

int  ms_queue_read (                                    /* MS_QUEUE.C   */
    MS_QUEUE *msq );        /* [i/o] ptr to MS queue structure (handle) */

/*............. Serial mouse support */
void ms_set_serial_mode (
    IO_SER_HND shnd );      /* [in] serial port handle                  */
void ms_set_mouse_type (
    int type );             /* [in] mouse type                          */

#ifdef __cplusplus
}
#endif

// #endif  /* ]]] */


//#ifdef __cplusplus
//extern "C" {
//#endif
//
//#ifdef __cplusplus
//}
//#endif

#endif /* ]]] _MS_DRV_H_LOADED */
/*@}*/
